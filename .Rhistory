Sys.setenv(LANG=EN)
Sys.setenv(LANG="EN")
library(slidify)
library(slidifyLibraries)
Sys.setenv(LANG="EN")
library(slidify)
library(slidifyLibraries)
Sys.setenv(LANG="EN")
library(slidify)
library(slidifyLibraries)
library(slidify)
library(devtools)
install_github("ramnathv/slidify")
install_github("ramnathv/slidifyLibraries")
library(slidify)
library(slidifyLibraries)
install.packages(c("knitr", "yaml"))
install.packages(c("knitr", "yaml"))
install.packages(c("knitr", "yaml"))
update.packages(ask=F, checkBuilt = T)
library(slidify)
library(slidifyLibraries)
library(slidify)
library(slidifyLibraries)
library(slidify)
library(slidifyLibraries)
packageVersion("rstudio")
warnings()
packageVersion("rstudio")
packageVersion("rstudio") > 0.98.507
packageVersion("rstudio") > "0.98.507"
packageVersion("rstudio") > "0.98.508"
packageVersion("rstudio") > "0.98.506"
packageVersion("rstudio") > "0.98.508"
packageVersion("rstuddio") > "0.98.508"
rstudio %in% search()
"rstudio" %in% search()
search()
"tools:rstudio" %in% search()
library(slidify)
library(slidifyLibraries)
library(parallel)
p <- mcparallel(sqrt(n))
res <- mccollect(p, wait=FALSE, timeout=1000)
res
source('~/.active-rstudio-document')
p <- mcparallel(sqrt(4))
ccollect(p, wait=FALSE, timeout=1000)
mccollect(p, wait=FALSE, timeout=1000)
mccollect(p)
if (is.null(res)) cat(n,"  NULL!\n")
res
n = 3
p <- mcparallel(sqrt(n))
res <- mccollect(p, wait=FALSE, timeout=1000)
mccollect(p)
res
if (is.null(res)) cat(n,"  NULL!\n")
library(parallel)
for (n in 1:13) {
p <- mcparallel(sqrt(n))
Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=1000)
mccollect(p)
if (is.null(res)) cat(n,"  NULL!\n")
}
library(parallel)
for (n in 1:5) {
p <- mcparallel(sqrt(n))
#Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=1000)
mccollect(p)
if (is.null(res)) cat(n,"  NULL!\n")
}
source('~/.active-rstudio-document')
res <- mccollect(mcparallel(sqrt(n)))
if (is.null(res)) cat(n,"  NULL!\n")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
for (n in 1:5) {
#Sys.sleep(0.01)
res <- mccollect(mcparallel(sqrt(n)), wait=FALSE, timeout=10)
if (is.null(res)) cat(n,"  NULL!\n")
}
res <- mccollect(mcparallel(sqrt(n)), wait=FALSE, timeout=10)
res
source('~/.active-rstudio-document')
library(parallel)
for (n in 1:5) {
p <- mcparallel(sqrt(n))
Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=1000)
mccollect(p)
if (is.null(res)) cat(n,"  NULL!\n")
}
library(slidify)
library(slidifyLibraries)
library(slidify)
library(slidifyLibraries)
digest::hmac(key="foo", object="bar")
digest::hmac(key="foo", object="bar")
library(digest)
?hmac
digest::hmac(key="foo", object="basdffdsfr")
digest::hmac(key="foo", "basdffdsfr")
?hmac
digest::hmac(key="foo", "basdffdsfr")
current <- hmac('Jefe', 'what do ya want for nothing?', "md5")
hmac('Jefe', 'what do ya want for nothing?', "md5")
hmac('foo', 'bar', "md5")
hmac('foo', 'bar', algo="md5")
digest::hmac(key="foo", object="bar", algo="md5")
library(slidify)
library(slidifyLibraries)
list.files("/")
list.files("/dsf")
out <- rnorm(1)
print(out)
library(slidify)
library(slidifyLibraries)
map
map
ls
toJSON(iris[1,])
library(jsonlite)
toJSON(iris[1,])
toJSON(iris[1,], pretty=T)
toJSON(iris[1:2,], pretty=T)
toJSON(iris)
fromJSON(toJSON(iris))
identical(iris, fromJSON(toJSON(iris)))
all.equal(iris, fromJSON(toJSON(iris)))
fromJSON(toJSON(cars))
identical(cars, fromJSON(toJSON(cars)))
x <- matrix(1:12, nrow=3)
library(jsonlite)
x <- matrix(1:12, nrow=3)
toJSON(x, pretty=T)
library(jsonlite)
x <- matrix(1:12, nrow=3)
toJSON(x, pretty=FALSE)
library(jsonlite)
x <- matrix(1:12, nrow=3)
json <- toJSON(x)
print(x)
y <- fromJSON(json)
identical(x,y)
y
x
all.equal(x,y)
y
x
y
x <- list(foo = matrix(1:12, nrow=3))
#Convert to JSON
json <- toJSON(x)
cat(x)
x
is(x)
cat(json)
y <- fromJSON(json)
all.equal(x,y)
[1] TRUE
print(y)
x <- list(foo = matrix(1:8, nrow=2))
#Convert to JSON
json <- toJSON(x)
cat(json)
y <- fromJSON(json)
all.equal(x,y)
[1] TRUE
print(y)
identical(cars, toJSON(fromJSON(cars)))
identical(cars, fromJSON(toJSON(cars)))
identical(volcano, fromJSON(toJSON(cars)))
identical(volcano, fromJSON(toJSON(volcano)))
json <- toJSON(iris)
iris2 <- fromJSON(json)
all.equal(iris, iris2)
iris2$Species <- as.factor(iris2$Species)
all.equal(iris, iris2)
identical(iris, iris2)
source('~/.active-rstudio-document')
library(parallel)
for (n in 1:5) {
p <- mcparallel(sqrt(n))
#Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=1000)
mccollect(p)
if (is.null(res)) cat(n,"  NULL!\n")
}
library(parallel)
for (n in 1:5) {
p <- mcparallel(sqrt(n))
#Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=1000)
mccollect(p)
if (is.null(res)) cat(n,"  NULL!\n")
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
#Sys.sleep(1)
n^2
})
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
#Sys.sleep(1)
n^2
})
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
Sys.sleep(1)
n^2
})
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
version
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
#Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
#Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(parallel)
for (n in 1:3) {
p <- mcparallel({
n^2
})
#Sys.sleep(0.01)
res <- mccollect(p, wait=FALSE, timeout=2)
mccollect(p)
print(res)
}
library(slidify)
library(slidifyLibraries)
